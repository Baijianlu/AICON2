# -*- coding: utf-8 -*-
"""
Created on Mon Apr  6 14:49:27 2020

@author: nwpuf
"""
import sys
import os
import numpy as np
from myprocesscontrol.electron import Electron
from myprocesscontrol.phonon import Phonon
from myprocesscontrol.tools import get_highsympath


def get_parser():
    import argparse
    parser = argparse.ArgumentParser(description="AICON command-line-tool")
    parser.set_defaults(electron=False, phonon=False, temperature=None, tmax=None, tmin=None, tstep=None,
                        dope=None, dope_max=None, dope_min=None, dope_step=None, mode='standard', highpath=False, noSB=False)
    parser.add_argument("--elec", dest="electron", action="store_true", help="Calculate electrical conductivity")
    parser.add_argument("--phon", dest="phonon", action="store_true", help="Calculate lattice thermal conductivity")
    parser.add_argument("-m", "--mode", dest="mode", help="mode for electrical conductivity calculation, either standard or doping")
    parser.add_argument("-t", "--temperature", nargs='+', dest="temperature", help="Specified temperature")
    parser.add_argument("--tmax", dest="tmax", type=float, help="Maximum calculated temperature")
    parser.add_argument("--tmin", dest="tmin", type=float, help="Minimum calculated temperature")
    parser.add_argument("--tstep", dest="tstep", type=float, help="Calculated temperature step")
    parser.add_argument("-d", "--dope", nargs='+', dest="dope", help="Specified carrier concentration")
    parser.add_argument("--dope_max", dest="dope_max", type=float, help="Maximum calculated carrier concentration")
    parser.add_argument("--dope_min", dest="dope_min", type=float, help="Minimum calculated carrier concentration")
    parser.add_argument("--dope_step", dest="dope_step", type=float, help="Calculated concentration step")
    parser.add_argument("--highpath", dest="highpath", action="store_true", help="Obtain high-symmetry path")
    parser.add_argument("--noSB", dest="noSB", action="store_true", help="Disable second band calculation")
    
    return parser


def Get_Electron(filepath, Temp, dope, mode, ifSB):
    '''For electron transport properties calculation '''    
    Compound = Electron()
    Compound.Get_bandstru(filepath + "equi/")
    Compound.Get_values(filepath, Temp, dope, mode, ifSB=ifSB)
    Compound.Output(Temp, dope, mode)

    
def Get_Phonon(filepath, Temp):
    '''For lattice thermal conductivity calculation '''
    kappa = Phonon(filepath)
    kappa.Get_Kappa(filepath, Temp)
    kappa.Output(Temp)
    

if __name__ == '__main__':
    '''AICON for transport properties calculation '''
    parser = get_parser()
    args = parser.parse_args()
    if args.electron:
        mode = args.mode
        if args.temperature is not None:
            Temp = np.array([float(i) for i in args.temperature])
        elif args.tmax is not None:
            Temp = np.arange(args.tmin, args.tmax+args.tstep, args.tstep)
        else:
            raise ValueError("Temperature or temperature range must be specified!")
            
        if mode == 'doping':
            if args.dope is not None:
                Dope = np.array([float(i) for i in args.dope])
            elif args.dope_max is not None:
                Dope = np.arange(args.dope_min, args.dope_max+args.dope_step, args.dope_step)
            else:
                raise ValueError("Carrier concentration or its range must be specified in doping mode!")
        else:
            Dope = args.dope
        
        if args.noSB:
            ifSB = False
        else: 
            ifSB = True

        Get_Electron("./", Temp, Dope, mode, ifSB)
        
    elif args.phonon:
        if args.highpath:
            filepath = os.getcwd()
            if os.path.exists(filepath + '/POSCAR'):
                get_highsympath('POSCAR')
            else:
                raise ValueError('No structure file found in current directory!')

            sys.exit(0)
            
        if args.temperature is not None:
            Temp = np.array([float(i) for i in args.temperature])
        elif args.tmax is not None:
            Temp = np.arange(args.tmin, args.tmax+args.tstep, args.tstep)
        else:
            raise ValueError("Temperature or temperature range must be specified!")

        Get_Phonon("./", Temp)
        
    else:
        raise ValueError("Must specify electron or phonon calculation!")    

#    mode = 'doping'                                                          #doping
#    Temp = np.array([200,250,300,350,400,450,500])                                                         #np.arange(300, 800, 100)
#    doping = [1.1e19]
#    filepath = 'D:\\nwpuf\\Documents\\AICon\\BiTe\\SOC'
    
    
#    CBM = dict()
#    VBM = dict()
#    CSB = dict()
#    VSB = dict()
#    TCB = dict()
#    TVB = dict()
#    
#    Compound = Electron()
#    Compound.Get_bandstru(filepath + '\\equi')
##    Compound.bandgap = 0.09
#    
#    if mode == 'standard':
#        mu = np.arange(-Compound.bandgap/2, -Compound.bandgap/2 + 1.0, 0.002)       #start from the middle of the gap to 1.5eV higher place
#        CBM['RelaxT'] = np.zeros((len(Temp), len(mu)))
#        CBM['Mobility'] = np.zeros((len(Temp), len(mu)))
#        CBM['Density'] = np.zeros((len(Temp), len(mu)))
#        CBM['Elcond'] = np.zeros((len(Temp), len(mu)))
#        CBM['Seebeck'] = np.zeros((len(Temp), len(mu)))
#        CBM['Lorenz'] = np.zeros((len(Temp), len(mu)))
#        CBM['Ekappa'] = np.zeros((len(Temp), len(mu)))
#        CBM['PF'] = np.zeros((len(Temp), len(mu)))
#        VBM['RelaxT'] = np.zeros((len(Temp), len(mu)))
#        VBM['Mobility'] = np.zeros((len(Temp), len(mu)))
#        VBM['Density'] = np.zeros((len(Temp), len(mu)))
#        VBM['Elcond'] = np.zeros((len(Temp), len(mu)))
#        VBM['Seebeck'] = np.zeros((len(Temp), len(mu)))
#        VBM['Lorenz'] = np.zeros((len(Temp), len(mu)))
#        VBM['Ekappa'] = np.zeros((len(Temp), len(mu)))
#        VBM['PF'] = np.zeros((len(Temp), len(mu)))
#        
#        Compound.Get_CBM()
#        Compound.Get_VBM()
#        Compound.Get_SB()
#        Get_transport(Compound.CBM, filepath)
#        Get_transport(Compound.VBM, filepath)
#        if hasattr(Compound, 'CSB'):
#            CSB['RelaxT'] = np.zeros((len(Temp), len(mu)))
#            CSB['Mobility'] = np.zeros((len(Temp), len(mu)))
#            CSB['Density'] = np.zeros((len(Temp), len(mu)))
#            CSB['Elcond'] = np.zeros((len(Temp), len(mu)))
#            CSB['Seebeck'] = np.zeros((len(Temp), len(mu)))
#            CSB['Lorenz'] = np.zeros((len(Temp), len(mu)))
#            CSB['Ekappa'] = np.zeros((len(Temp), len(mu)))
#            CSB['PF'] = np.zeros((len(Temp), len(mu)))
#            TCB['RelaxT'] = np.zeros((len(Temp), len(mu)))
#            TCB['Mobility'] = np.zeros((len(Temp), len(mu)))
#            TCB['Density'] = np.zeros((len(Temp), len(mu)))
#            TCB['Elcond'] = np.zeros((len(Temp), len(mu)))
#            TCB['Seebeck'] = np.zeros((len(Temp), len(mu)))
#            TCB['Lorenz'] = np.zeros((len(Temp), len(mu)))
#            TCB['Ekappa'] = np.zeros((len(Temp), len(mu)))
#            TCB['PF'] = np.zeros((len(Temp), len(mu)))            
#            Get_transport(Compound.CSB, filepath)
#            gap_csb = Compound.CSB.bandgap - Compound.CBM.bandgap
#        if hasattr(Compound, 'VSB'):
#            VSB['RelaxT'] = np.zeros((len(Temp), len(mu)))
#            VSB['Mobility'] = np.zeros((len(Temp), len(mu)))
#            VSB['Density'] = np.zeros((len(Temp), len(mu)))
#            VSB['Elcond'] = np.zeros((len(Temp), len(mu)))
#            VSB['Seebeck'] = np.zeros((len(Temp), len(mu)))
#            VSB['Lorenz'] = np.zeros((len(Temp), len(mu)))
#            VSB['Ekappa'] = np.zeros((len(Temp), len(mu)))
#            VSB['PF'] = np.zeros((len(Temp), len(mu)))
#            TVB['RelaxT'] = np.zeros((len(Temp), len(mu)))
#            TVB['Mobility'] = np.zeros((len(Temp), len(mu)))
#            TVB['Density'] = np.zeros((len(Temp), len(mu)))
#            TVB['Elcond'] = np.zeros((len(Temp), len(mu)))
#            TVB['Seebeck'] = np.zeros((len(Temp), len(mu)))
#            TVB['Lorenz'] = np.zeros((len(Temp), len(mu)))
#            TVB['Ekappa'] = np.zeros((len(Temp), len(mu)))
#            TVB['PF'] = np.zeros((len(Temp), len(mu)))                  
#            Get_transport(Compound.VSB, filepath)
#            gap_vsb = Compound.VSB.bandgap - Compound.VBM.bandgap
#        for i, T in enumerate(Temp):
#            mu_x = mu / (EBoltzm * T)
#            for j, x in enumerate(mu_x):
#                CBM['RelaxT'][i,j] = Compound.CBM.RT.Totaltime(x, T)
#                CBM['Mobility'][i,j] = Compound.CBM.Mobility(x, T)
#                CBM['Density'][i,j] = Compound.CBM.Density(x, T)
#                CBM['Elcond'][i,j] = Compound.CBM.Elcond(x, T)
#                CBM['Seebeck'][i,j] = Compound.CBM.Seebeck.seebeck(x, T)
#                CBM['Lorenz'][i,j] = Compound.CBM.Ekappa.lorenz(x, T)
#                CBM['Ekappa'][i,j] = Compound.CBM.Ekappa.ekappa(x, T)
#                CBM['PF'][i,j] = CBM['Seebeck'][i,j]**2 * CBM['Elcond'][i,j]
#                VBM['RelaxT'][i,j] = Compound.VBM.RT.Totaltime(x, T)
#                VBM['Mobility'][i,j] = Compound.VBM.Mobility(x, T)
#                VBM['Density'][i,j] = Compound.VBM.Density(x, T)
#                VBM['Elcond'][i,j] = Compound.VBM.Elcond(x, T)
#                VBM['Seebeck'][i,j] = Compound.VBM.Seebeck.seebeck(x, T)
#                VBM['Lorenz'][i,j] = Compound.VBM.Ekappa.lorenz(x, T)
#                VBM['Ekappa'][i,j] = Compound.VBM.Ekappa.ekappa(x, T)
#                VBM['PF'][i,j] = VBM['Seebeck'][i,j]**2 * VBM['Elcond'][i,j]
#                if hasattr(Compound, 'CSB'):
#                    CSB['RelaxT'][i,j] = Compound.CSB.RT.Totaltime(x - gap_csb/(EBoltzm * T), T)
#                    CSB['Mobility'][i,j] = Compound.CSB.Mobility(x - gap_csb/(EBoltzm * T), T)
#                    CSB['Density'][i,j] = Compound.CSB.Density(x - gap_csb/(EBoltzm * T), T)
#                    CSB['Elcond'][i,j] = Compound.CSB.Elcond(x - gap_csb/(EBoltzm * T), T)
#                    CSB['Seebeck'][i,j] = Compound.CSB.Seebeck.seebeck(x - gap_csb/(EBoltzm * T), T)
#                    CSB['Lorenz'][i,j] = Compound.CSB.Ekappa.lorenz(x - gap_csb/(EBoltzm * T), T)
#                    CSB['Ekappa'][i,j] = Compound.CSB.Ekappa.ekappa(x - gap_csb/(EBoltzm * T), T)
#                    CSB['PF'][i,j] = CSB['Seebeck'][i,j]**2 * CSB['Elcond'][i,j]
#                    TCB['Density'][i,j] = CBM['Density'][i,j] + CSB['Density'][i,j]
#                    TCB['Elcond'][i,j] = CBM['Elcond'][i,j] + CSB['Elcond'][i,j]
#                    TCB['Seebeck'][i,j] = (CBM['Seebeck'][i,j] * CBM['Elcond'][i,j] + CSB['Seebeck'][i,j] * CSB['Elcond'][i,j]) / (CBM['Elcond'][i,j]+CSB['Elcond'][i,j])
#                    TCB['Lorenz'][i,j] = (CBM['Lorenz'][i,j] * CBM['Elcond'][i,j] + CSB['Lorenz'][i,j] * CSB['Elcond'][i,j]) / (CBM['Elcond'][i,j]+CSB['Elcond'][i,j])
#                    TCB['Ekappa'][i,j] = TCB['Lorenz'][i,j] * TCB['Elcond'][i,j] * T
#                    TCB['PF'][i,j] = TCB['Seebeck'][i,j]**2 * TCB['Elcond'][i,j]
#                if hasattr(Compound, 'VSB'):
#                    VSB['RelaxT'][i,j] = Compound.VSB.RT.Totaltime(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['Mobility'][i,j] = Compound.VSB.Mobility(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['Density'][i,j] = Compound.VSB.Density(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['Elcond'][i,j] = Compound.VSB.Elcond(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['Seebeck'][i,j] = Compound.VSB.Seebeck.seebeck(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['Lorenz'][i,j] = Compound.VSB.Ekappa.lorenz(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['Ekappa'][i,j] = Compound.VSB.Ekappa.ekappa(x - gap_vsb/(EBoltzm * T), T)
#                    VSB['PF'][i,j] = VSB['Seebeck'][i,j]**2 * VSB['Elcond'][i,j]
#                    TVB['Density'][i,j] = VBM['Density'][i,j] + VSB['Density'][i,j]
#                    TVB['Elcond'][i,j] = VBM['Elcond'][i,j] + VSB['Elcond'][i,j]
#                    TVB['Seebeck'][i,j] = (VBM['Seebeck'][i,j] * VBM['Elcond'][i,j] + VSB['Seebeck'][i,j] * VSB['Elcond'][i,j]) / (VBM['Elcond'][i,j]+VSB['Elcond'][i,j])
#                    TVB['Lorenz'][i,j] = (VBM['Lorenz'][i,j] * VBM['Elcond'][i,j] + VSB['Lorenz'][i,j] * VSB['Elcond'][i,j]) / (VBM['Elcond'][i,j]+VSB['Elcond'][i,j])
#                    TVB['Ekappa'][i,j] = TVB['Lorenz'][i,j] * TVB['Elcond'][i,j] * T
#                    TVB['PF'][i,j] = TVB['Seebeck'][i,j]**2 * TVB['Elcond'][i,j]                    
#
#    if mode == 'doping':
#        mu = np.arange(-Compound.bandgap/2, -Compound.bandgap/2 + 1.0, 0.0005)
#        CBM['RelaxT'] = np.zeros((len(Temp), len(doping)))
#        CBM['Mobility'] = np.zeros((len(Temp), len(doping)))
#        CBM['Density'] = np.zeros((len(Temp), len(doping)))
#        CBM['Elcond'] = np.zeros((len(Temp), len(doping)))
#        CBM['Seebeck'] = np.zeros((len(Temp), len(doping)))
#        CBM['Lorenz'] = np.zeros((len(Temp), len(doping)))
#        CBM['Ekappa'] = np.zeros((len(Temp), len(doping)))
#        CBM['PF'] = np.zeros((len(Temp), len(doping)))
#        VBM['RelaxT'] = np.zeros((len(Temp), len(doping)))
#        VBM['Mobility'] = np.zeros((len(Temp), len(doping)))
#        VBM['Density'] = np.zeros((len(Temp), len(doping)))
#        VBM['Elcond'] = np.zeros((len(Temp), len(doping)))
#        VBM['Seebeck'] = np.zeros((len(Temp), len(doping)))
#        VBM['Lorenz'] = np.zeros((len(Temp), len(doping)))
#        VBM['Ekappa'] = np.zeros((len(Temp), len(doping)))
#        VBM['PF'] = np.zeros((len(Temp), len(doping)))
#        
#        Compound.Get_CBM()
#        Compound.Get_VBM()
#        Compound.Get_SB()
#        Get_transport(Compound.CBM, filepath)
#        Get_transport(Compound.VBM, filepath)
#        
#        if hasattr(Compound, 'CSB'):
#            CSB['RelaxT'] = np.zeros((len(Temp), len(doping)))
#            CSB['Mobility'] = np.zeros((len(Temp), len(doping)))
#            CSB['Density'] = np.zeros((len(Temp), len(doping)))
#            CSB['Elcond'] = np.zeros((len(Temp), len(doping)))
#            CSB['Seebeck'] = np.zeros((len(Temp), len(doping)))
#            CSB['Lorenz'] = np.zeros((len(Temp), len(doping)))
#            CSB['Ekappa'] = np.zeros((len(Temp), len(doping)))
#            CSB['PF'] = np.zeros((len(Temp), len(doping)))
#            TCB['Density'] = np.zeros((len(Temp), len(doping)))
#            TCB['Elcond'] = np.zeros((len(Temp), len(doping)))
#            TCB['Seebeck'] = np.zeros((len(Temp), len(doping)))
#            TCB['Lorenz'] = np.zeros((len(Temp), len(doping)))
#            TCB['Ekappa'] = np.zeros((len(Temp), len(doping)))
#            TCB['PF'] = np.zeros((len(Temp), len(doping)))
#            Get_transport(Compound.CSB, filepath)
#            gap_csb = Compound.CSB.bandgap - Compound.CBM.bandgap
#            cmu_x = find_mu_doping2(Compound.CBM, Compound.CSB, doping, mu, Temp)
#        else:
#            cmu_x = find_mu_doping(Compound.CBM, doping, mu, Temp)
#            
#        if hasattr(Compound, 'VSB'):
#            VSB['RelaxT'] = np.zeros((len(Temp), len(doping)))
#            VSB['Mobility'] = np.zeros((len(Temp), len(doping)))
#            VSB['Density'] = np.zeros((len(Temp), len(doping)))
#            VSB['Elcond'] = np.zeros((len(Temp), len(doping)))
#            VSB['Seebeck'] = np.zeros((len(Temp), len(doping)))
#            VSB['Lorenz'] = np.zeros((len(Temp), len(doping)))
#            VSB['Ekappa'] = np.zeros((len(Temp), len(doping)))
#            VSB['PF'] = np.zeros((len(Temp), len(doping)))
#            TVB['Density'] = np.zeros((len(Temp), len(doping)))
#            TVB['Elcond'] = np.zeros((len(Temp), len(doping)))
#            TVB['Seebeck'] = np.zeros((len(Temp), len(doping)))
#            TVB['Lorenz'] = np.zeros((len(Temp), len(doping)))
#            TVB['Ekappa'] = np.zeros((len(Temp), len(doping)))
#            TVB['PF'] = np.zeros((len(Temp), len(doping)))
#            Get_transport(Compound.VSB, filepath)
#            gap_vsb = Compound.VSB.bandgap - Compound.VBM.bandgap
#            vmu_x = find_mu_doping2(Compound.VBM, Compound.VSB, doping, mu, Temp)
#        else:
#            vmu_x = find_mu_doping(Compound.VBM, doping, mu, Temp)
#            
#        for i, T in enumerate(Temp):
#            for j, dope in enumerate(doping):
#                CBM['RelaxT'][i,j] = Compound.CBM.RT.Totaltime(cmu_x[i,j], T)
#                CBM['Mobility'][i,j] = Compound.CBM.Mobility(cmu_x[i,j], T)
#                CBM['Density'][i,j] = Compound.CBM.Density(cmu_x[i,j], T)
#                CBM['Elcond'][i,j] = Compound.CBM.Elcond(cmu_x[i,j], T)
#                CBM['Seebeck'][i,j] = Compound.CBM.Seebeck.seebeck(cmu_x[i,j], T)
#                CBM['Lorenz'][i,j] = Compound.CBM.Ekappa.lorenz(cmu_x[i,j], T)
#                CBM['Ekappa'][i,j] = Compound.CBM.Ekappa.ekappa(cmu_x[i,j], T)
#                CBM['PF'][i,j] = CBM['Seebeck'][i,j]**2 * CBM['Elcond'][i,j]
#                VBM['RelaxT'][i,j] = Compound.VBM.RT.Totaltime(vmu_x[i,j], T)
#                VBM['Mobility'][i,j] = Compound.VBM.Mobility(vmu_x[i,j], T)
#                VBM['Density'][i,j] = Compound.VBM.Density(vmu_x[i,j], T)
#                VBM['Elcond'][i,j] = Compound.VBM.Elcond(vmu_x[i,j], T)
#                VBM['Seebeck'][i,j] = Compound.VBM.Seebeck.seebeck(vmu_x[i,j], T)
#                VBM['Lorenz'][i,j] = Compound.VBM.Ekappa.lorenz(vmu_x[i,j], T)
#                VBM['Ekappa'][i,j] = Compound.VBM.Ekappa.ekappa(vmu_x[i,j], T)
#                VBM['PF'][i,j] = VBM['Seebeck'][i,j]**2 * VBM['Elcond'][i,j]
#                if hasattr(Compound, 'CSB'):
#                    CSB['RelaxT'][i,j] = Compound.CSB.RT.Totaltime(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['Mobility'][i,j] = Compound.CSB.Mobility(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['Density'][i,j] = Compound.CSB.Density(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['Elcond'][i,j] = Compound.CSB.Elcond(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['Seebeck'][i,j] = Compound.CSB.Seebeck.seebeck(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['Lorenz'][i,j] = Compound.CSB.Ekappa.lorenz(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['Ekappa'][i,j] = Compound.CSB.Ekappa.ekappa(cmu_x[i,j] - gap_csb/(EBoltzm * T), T)
#                    CSB['PF'][i,j] = CSB['Seebeck'][i,j]**2 * CSB['Elcond'][i,j]
#                    TCB['Density'][i,j] = CBM['Density'][i,j] + CSB['Density'][i,j]
#                    TCB['Elcond'][i,j] = CBM['Elcond'][i,j] + CSB['Elcond'][i,j]
#                    TCB['Seebeck'][i,j] = (CBM['Seebeck'][i,j] * CBM['Elcond'][i,j] + CSB['Seebeck'][i,j] * CSB['Elcond'][i,j]) / (CBM['Elcond'][i,j]+CSB['Elcond'][i,j])
#                    TCB['Lorenz'][i,j] = (CBM['Lorenz'][i,j] * CBM['Elcond'][i,j] + CSB['Lorenz'][i,j] * CSB['Elcond'][i,j]) / (CBM['Elcond'][i,j]+CSB['Elcond'][i,j])
#                    TCB['Ekappa'][i,j] = TCB['Lorenz'][i,j] * TCB['Elcond'][i,j] * T
#                    TCB['PF'][i,j] = TCB['Seebeck'][i,j]**2 * TCB['Elcond'][i,j]
#                if hasattr(Compound, 'VSB'):
#                    VSB['RelaxT'][i,j] = Compound.VSB.RT.Totaltime(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['Mobility'][i,j] = Compound.VSB.Mobility(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['Density'][i,j] = Compound.VSB.Density(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['Elcond'][i,j] = Compound.VSB.Elcond(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['Seebeck'][i,j] = Compound.VSB.Seebeck.seebeck(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['Lorenz'][i,j] = Compound.VSB.Ekappa.lorenz(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['Ekappa'][i,j] = Compound.VSB.Ekappa.ekappa(vmu_x[i,j] - gap_vsb/(EBoltzm * T), T)
#                    VSB['PF'][i,j] = VSB['Seebeck'][i,j]**2 * VSB['Elcond'][i,j]
#                    TVB['Density'][i,j] = VBM['Density'][i,j] + VSB['Density'][i,j]
#                    TVB['Elcond'][i,j] = VBM['Elcond'][i,j] + VSB['Elcond'][i,j]
#                    TVB['Seebeck'][i,j] = (VBM['Seebeck'][i,j] * VBM['Elcond'][i,j] + VSB['Seebeck'][i,j] * VSB['Elcond'][i,j]) / (VBM['Elcond'][i,j]+VSB['Elcond'][i,j])
#                    TVB['Lorenz'][i,j] = (VBM['Lorenz'][i,j] * VBM['Elcond'][i,j] + VSB['Lorenz'][i,j] * VSB['Elcond'][i,j]) / (VBM['Elcond'][i,j]+VSB['Elcond'][i,j])
#                    TVB['Ekappa'][i,j] = TVB['Lorenz'][i,j] * TVB['Elcond'][i,j] * T
#                    TVB['PF'][i,j] = TVB['Seebeck'][i,j]**2 * TVB['Elcond'][i,j]
        
                    
                    
                    
